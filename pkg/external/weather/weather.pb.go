// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: weather.proto

package weather

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Forecast struct {
	Date     string  `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	Rain     bool    `protobuf:"varint,2,opt,name=rain,proto3" json:"rain,omitempty"`
	Humidity float32 `protobuf:"fixed32,3,opt,name=humidity,proto3" json:"humidity,omitempty"`
	Temp     int32   `protobuf:"varint,4,opt,name=temp,proto3" json:"temp,omitempty"`
}

func (m *Forecast) Reset()                    { *m = Forecast{} }
func (m *Forecast) String() string            { return proto.CompactTextString(m) }
func (*Forecast) ProtoMessage()               {}
func (*Forecast) Descriptor() ([]byte, []int) { return fileDescriptorWeather, []int{0} }

func (m *Forecast) GetDate() string {
	if m != nil {
		return m.Date
	}
	return ""
}

func (m *Forecast) GetRain() bool {
	if m != nil {
		return m.Rain
	}
	return false
}

func (m *Forecast) GetHumidity() float32 {
	if m != nil {
		return m.Humidity
	}
	return 0
}

func (m *Forecast) GetTemp() int32 {
	if m != nil {
		return m.Temp
	}
	return 0
}

type ExtendedForecast struct {
	Forecasts []*Forecast `protobuf:"bytes,1,rep,name=forecasts" json:"forecasts,omitempty"`
}

func (m *ExtendedForecast) Reset()                    { *m = ExtendedForecast{} }
func (m *ExtendedForecast) String() string            { return proto.CompactTextString(m) }
func (*ExtendedForecast) ProtoMessage()               {}
func (*ExtendedForecast) Descriptor() ([]byte, []int) { return fileDescriptorWeather, []int{1} }

func (m *ExtendedForecast) GetForecasts() []*Forecast {
	if m != nil {
		return m.Forecasts
	}
	return nil
}

func init() {
	proto.RegisterType((*Forecast)(nil), "weather.Forecast")
	proto.RegisterType((*ExtendedForecast)(nil), "weather.ExtendedForecast")
}

func init() { proto.RegisterFile("weather.proto", fileDescriptorWeather) }

var fileDescriptorWeather = []byte{
	// 217 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x44, 0x8f, 0x4b, 0x4e, 0xc3, 0x30,
	0x10, 0x86, 0xe5, 0xb6, 0x40, 0x6a, 0x84, 0x04, 0x59, 0x59, 0xac, 0xac, 0xae, 0xbc, 0x49, 0x2c,
	0xc1, 0x0d, 0xca, 0xe3, 0x00, 0x5e, 0xb2, 0x73, 0x92, 0x21, 0x36, 0xad, 0x1f, 0xb2, 0x27, 0xa2,
	0xbd, 0x3d, 0xaa, 0x95, 0x86, 0xdd, 0xf7, 0xcf, 0x7c, 0x9a, 0x07, 0x7d, 0xf8, 0x05, 0x8d, 0x06,
	0x52, 0x1b, 0x53, 0xc0, 0x50, 0xdf, 0xcd, 0x71, 0xd7, 0xd1, 0xea, 0x33, 0x24, 0xe8, 0x75, 0xc6,
	0xba, 0xa6, 0x9b, 0x41, 0x23, 0x30, 0xc2, 0x89, 0xd8, 0xaa, 0xc2, 0x97, 0x5a, 0xd2, 0xd6, 0xb3,
	0x15, 0x27, 0xa2, 0x52, 0x85, 0xeb, 0x67, 0x5a, 0x99, 0xc9, 0xd9, 0xc1, 0xe2, 0x99, 0xad, 0x39,
	0x11, 0x2b, 0xb5, 0xe4, 0x8b, 0x8f, 0xe0, 0x22, 0xdb, 0x70, 0x22, 0x6e, 0x54, 0xe1, 0xdd, 0x1b,
	0x7d, 0xfc, 0x38, 0x21, 0xf8, 0x01, 0x86, 0x65, 0x97, 0xa4, 0xdb, 0xef, 0x99, 0x33, 0x23, 0x7c,
	0x2d, 0xee, 0x5f, 0x9e, 0xda, 0xeb, 0x8d, 0x57, 0x4b, 0xfd, 0x3b, 0xfb, 0xf7, 0xaf, 0xfd, 0x68,
	0xd1, 0x4c, 0x5d, 0xdb, 0x07, 0x27, 0x7f, 0xb4, 0xb3, 0x39, 0x78, 0x73, 0xd6, 0x88, 0x72, 0x4c,
	0xb1, 0x6f, 0xdc, 0x74, 0x44, 0xdb, 0xc4, 0xc3, 0xd8, 0x94, 0x0f, 0xb3, 0x8c, 0x87, 0x51, 0xc2,
	0x09, 0x21, 0x79, 0x7d, 0x94, 0xf3, 0xe4, 0xee, 0xb6, 0x34, 0x5f, 0xff, 0x02, 0x00, 0x00, 0xff,
	0xff, 0xf6, 0x2d, 0x1b, 0xe7, 0x0f, 0x01, 0x00, 0x00,
}
