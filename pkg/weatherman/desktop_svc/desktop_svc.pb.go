// Code generated by protoc-gen-go. DO NOT EDIT.
// source: desktop_svc.proto

/*
Package desktop is a generated protocol buffer package.

It is generated from these files:
	desktop_svc.proto

It has these top-level messages:
	GetWeatherRequest
	GetWeatherResponse
*/
package desktop

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import location "github.com/jamisonhyatt/grpc-multi-pkg-protos/pkg/external/location"
import weather "github.com/jamisonhyatt/grpc-multi-pkg-protos/pkg/external/weather"
import weather1 "github.com/jamisonhyatt/grpc-multi-pkg-protos/pkg/external/weather"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GetWeatherRequest struct {
	City *location.City `protobuf:"bytes,1,opt,name=city" json:"city,omitempty"`
}

func (m *GetWeatherRequest) Reset()                    { *m = GetWeatherRequest{} }
func (m *GetWeatherRequest) String() string            { return proto.CompactTextString(m) }
func (*GetWeatherRequest) ProtoMessage()               {}
func (*GetWeatherRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *GetWeatherRequest) GetCity() *location.City {
	if m != nil {
		return m.City
	}
	return nil
}

type GetWeatherResponse struct {
	Forecast         *weather.Forecast         `protobuf:"bytes,1,opt,name=forecast" json:"forecast,omitempty"`
	ExtendedForecast *weather.ExtendedForecast `protobuf:"bytes,2,opt,name=extended_forecast,json=extendedForecast" json:"extended_forecast,omitempty"`
	ActiveHurricane  *weather1.Hurricane       `protobuf:"bytes,3,opt,name=active_hurricane,json=activeHurricane" json:"active_hurricane,omitempty"`
}

func (m *GetWeatherResponse) Reset()                    { *m = GetWeatherResponse{} }
func (m *GetWeatherResponse) String() string            { return proto.CompactTextString(m) }
func (*GetWeatherResponse) ProtoMessage()               {}
func (*GetWeatherResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GetWeatherResponse) GetForecast() *weather.Forecast {
	if m != nil {
		return m.Forecast
	}
	return nil
}

func (m *GetWeatherResponse) GetExtendedForecast() *weather.ExtendedForecast {
	if m != nil {
		return m.ExtendedForecast
	}
	return nil
}

func (m *GetWeatherResponse) GetActiveHurricane() *weather1.Hurricane {
	if m != nil {
		return m.ActiveHurricane
	}
	return nil
}

func init() {
	proto.RegisterType((*GetWeatherRequest)(nil), "desktop.GetWeatherRequest")
	proto.RegisterType((*GetWeatherResponse)(nil), "desktop.GetWeatherResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Desktop service

type DesktopClient interface {
	GetWeather(ctx context.Context, in *GetWeatherRequest, opts ...grpc.CallOption) (*GetWeatherResponse, error)
}

type desktopClient struct {
	cc *grpc.ClientConn
}

func NewDesktopClient(cc *grpc.ClientConn) DesktopClient {
	return &desktopClient{cc}
}

func (c *desktopClient) GetWeather(ctx context.Context, in *GetWeatherRequest, opts ...grpc.CallOption) (*GetWeatherResponse, error) {
	out := new(GetWeatherResponse)
	err := grpc.Invoke(ctx, "/desktop.Desktop/GetWeather", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Desktop service

type DesktopServer interface {
	GetWeather(context.Context, *GetWeatherRequest) (*GetWeatherResponse, error)
}

func RegisterDesktopServer(s *grpc.Server, srv DesktopServer) {
	s.RegisterService(&_Desktop_serviceDesc, srv)
}

func _Desktop_GetWeather_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWeatherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DesktopServer).GetWeather(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/desktop.Desktop/GetWeather",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DesktopServer).GetWeather(ctx, req.(*GetWeatherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Desktop_serviceDesc = grpc.ServiceDesc{
	ServiceName: "desktop.Desktop",
	HandlerType: (*DesktopServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetWeather",
			Handler:    _Desktop_GetWeather_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "desktop_svc.proto",
}

func init() { proto.RegisterFile("desktop_svc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 305 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0x31, 0x4f, 0xc3, 0x30,
	0x10, 0x85, 0x29, 0x20, 0x8a, 0x8c, 0x04, 0x8d, 0x25, 0x44, 0x09, 0x0b, 0xca, 0xc4, 0x92, 0x44,
	0x2a, 0x03, 0x13, 0x0b, 0x94, 0x96, 0x39, 0x0b, 0x12, 0x4b, 0xe5, 0xba, 0x47, 0x62, 0xda, 0xd8,
	0xc6, 0xbe, 0x14, 0xf2, 0x17, 0xf9, 0x55, 0x48, 0xb1, 0x63, 0x10, 0x30, 0x25, 0x7a, 0xdf, 0x7b,
	0x97, 0xdc, 0x3b, 0x12, 0xad, 0xc0, 0xae, 0x51, 0xe9, 0x85, 0xdd, 0xf2, 0x4c, 0x1b, 0x85, 0x8a,
	0x0e, 0xbd, 0x14, 0x9f, 0x6d, 0x14, 0x67, 0x28, 0x94, 0xcc, 0xfb, 0x17, 0xe7, 0x88, 0x4f, 0xdf,
	0x81, 0x61, 0x05, 0x26, 0xf7, 0x4f, 0x2f, 0x8f, 0x7b, 0xb9, 0x6a, 0x8c, 0x11, 0x9c, 0x49, 0xb0,
	0x8e, 0x24, 0x37, 0x24, 0x9a, 0x03, 0x3e, 0x39, 0x5c, 0xc0, 0x5b, 0x03, 0x16, 0x69, 0x42, 0xf6,
	0xb9, 0xc0, 0x76, 0x3c, 0xb8, 0x1c, 0x5c, 0x1d, 0x4d, 0x8e, 0xb3, 0xf0, 0x91, 0x7b, 0x81, 0x6d,
	0xd1, 0xb1, 0xe4, 0x73, 0x40, 0xe8, 0xcf, 0xa4, 0xd5, 0x4a, 0x5a, 0xa0, 0x29, 0x39, 0x7c, 0x51,
	0x06, 0x38, 0xb3, 0xe8, 0xe3, 0x51, 0xd6, 0xff, 0xcb, 0xcc, 0x83, 0x22, 0x58, 0xe8, 0x8c, 0x44,
	0xf0, 0x81, 0x20, 0x57, 0xb0, 0x5a, 0x84, 0xdc, 0x6e, 0x97, 0x3b, 0x0f, 0xb9, 0x07, 0xef, 0x08,
	0xf9, 0x11, 0xfc, 0x52, 0xe8, 0x2d, 0x19, 0x31, 0x8e, 0x62, 0x0b, 0x8b, 0xb0, 0xe1, 0x78, 0xaf,
	0x1b, 0x43, 0xc3, 0x98, 0xc7, 0x9e, 0x14, 0x27, 0xce, 0x1b, 0x84, 0x49, 0x41, 0x86, 0x53, 0x57,
	0x2d, 0x9d, 0x13, 0xf2, 0xbd, 0x16, 0x8d, 0x33, 0x5f, 0x79, 0xf6, 0xa7, 0xa5, 0xf8, 0xe2, 0x5f,
	0xe6, 0x7a, 0x48, 0x76, 0xee, 0x66, 0xcf, 0xd3, 0x52, 0x60, 0xd5, 0x2c, 0x33, 0xae, 0xea, 0xfc,
	0x95, 0xd5, 0xc2, 0x2a, 0x59, 0xb5, 0x0c, 0x31, 0x2f, 0x8d, 0xe6, 0x69, 0xdd, 0x6c, 0x50, 0xa4,
	0x7a, 0x5d, 0xa6, 0xdd, 0x25, 0x6c, 0xae, 0xd7, 0x65, 0x7f, 0xb6, 0x9a, 0xc9, 0xdc, 0x0f, 0x5f,
	0x1e, 0x74, 0xf8, 0xfa, 0x2b, 0x00, 0x00, 0xff, 0xff, 0x44, 0x0c, 0xf7, 0xf4, 0x10, 0x02, 0x00,
	0x00,
}
