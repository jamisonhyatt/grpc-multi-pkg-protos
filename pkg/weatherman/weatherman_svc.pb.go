// Code generated by protoc-gen-go. DO NOT EDIT.
// source: weatherman_svc.proto

/*
Package weatherman is a generated protocol buffer package.

It is generated from these files:
	weatherman_svc.proto

It has these top-level messages:
	HealthCheckRequest
	HealthCheckResponse
*/
package weatherman

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type HealthCheckRequest struct {
}

func (m *HealthCheckRequest) Reset()                    { *m = HealthCheckRequest{} }
func (m *HealthCheckRequest) String() string            { return proto.CompactTextString(m) }
func (*HealthCheckRequest) ProtoMessage()               {}
func (*HealthCheckRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type HealthCheckResponse struct {
	// Whether the service is overall healthy.
	Healthy bool `protobuf:"varint,1,opt,name=healthy" json:"healthy,omitempty"`
}

func (m *HealthCheckResponse) Reset()                    { *m = HealthCheckResponse{} }
func (m *HealthCheckResponse) String() string            { return proto.CompactTextString(m) }
func (*HealthCheckResponse) ProtoMessage()               {}
func (*HealthCheckResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *HealthCheckResponse) GetHealthy() bool {
	if m != nil {
		return m.Healthy
	}
	return false
}

func init() {
	proto.RegisterType((*HealthCheckRequest)(nil), "weatherman.HealthCheckRequest")
	proto.RegisterType((*HealthCheckResponse)(nil), "weatherman.HealthCheckResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Weatherman service

type WeathermanClient interface {
	// Get service health
	Healthcheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type weathermanClient struct {
	cc *grpc.ClientConn
}

func NewWeathermanClient(cc *grpc.ClientConn) WeathermanClient {
	return &weathermanClient{cc}
}

func (c *weathermanClient) Healthcheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := grpc.Invoke(ctx, "/weatherman.Weatherman/Healthcheck", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Weatherman service

type WeathermanServer interface {
	// Get service health
	Healthcheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
}

func RegisterWeathermanServer(s *grpc.Server, srv WeathermanServer) {
	s.RegisterService(&_Weatherman_serviceDesc, srv)
}

func _Weatherman_Healthcheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeathermanServer).Healthcheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/weatherman.Weatherman/Healthcheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeathermanServer).Healthcheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Weatherman_serviceDesc = grpc.ServiceDesc{
	ServiceName: "weatherman.Weatherman",
	HandlerType: (*WeathermanServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Healthcheck",
			Handler:    _Weatherman_Healthcheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "weatherman_svc.proto",
}

func init() { proto.RegisterFile("weatherman_svc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 192 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x29, 0x4f, 0x4d, 0x2c,
	0xc9, 0x48, 0x2d, 0xca, 0x4d, 0xcc, 0x8b, 0x2f, 0x2e, 0x4b, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9,
	0x17, 0xe2, 0x42, 0x88, 0x2a, 0x89, 0x70, 0x09, 0x79, 0xa4, 0x26, 0xe6, 0x94, 0x64, 0x38, 0x67,
	0xa4, 0x26, 0x67, 0x07, 0xa5, 0x16, 0x96, 0xa6, 0x16, 0x97, 0x28, 0xe9, 0x73, 0x09, 0xa3, 0x88,
	0x16, 0x17, 0xe4, 0xe7, 0x15, 0xa7, 0x0a, 0x49, 0x70, 0xb1, 0x67, 0x80, 0x85, 0x2b, 0x25, 0x18,
	0x15, 0x18, 0x35, 0x38, 0x82, 0x60, 0x5c, 0xa3, 0x38, 0x2e, 0xae, 0x70, 0xb8, 0xa1, 0x42, 0x01,
	0x5c, 0xdc, 0x10, 0xed, 0xc9, 0x20, 0xed, 0x42, 0x72, 0x7a, 0x08, 0x0b, 0xf5, 0x30, 0x6d, 0x93,
	0x92, 0xc7, 0x29, 0x0f, 0xb1, 0x57, 0x89, 0xc1, 0xc9, 0x2e, 0xca, 0x26, 0x3d, 0xb3, 0x24, 0xa3,
	0x34, 0x49, 0x2f, 0x39, 0x3f, 0x57, 0x3f, 0x2b, 0x31, 0x37, 0xb3, 0x38, 0x3f, 0x2f, 0xa3, 0x32,
	0xb1, 0xa4, 0x44, 0x3f, 0xbd, 0xa8, 0x20, 0x59, 0x37, 0xb7, 0x34, 0xa7, 0x24, 0x53, 0xb7, 0x20,
	0x3b, 0x5d, 0x17, 0xec, 0xc5, 0x62, 0xfd, 0x82, 0xec, 0x74, 0x7d, 0x84, 0xa9, 0x49, 0x6c, 0x60,
	0x61, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x50, 0x96, 0x17, 0x8b, 0x11, 0x01, 0x00, 0x00,
}
